{
	"info": {
		"_postman_id": "54e876ca-3d5c-4784-820d-24f163878c24",
		"name": "Rule Engine API",
		"description": "A collection for testing the Rule Engine API endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16726580"
	},
	"item": [
		{
			"name": "Health Check",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"health"
							]
						},
						"description": "Check the health of the service"
					},
					"response": []
				}
			],
			"description": "Health check endpoints"
		},
		{
			"name": "Rules",
			"item": [
				{
					"name": "Validate Rule",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Cisco Version Rule\",\n  \"description\": \"Ensures Cisco devices are running the required OS version\",\n  \"conditions\": {\n    \"any\": [\n      {\n        \"path\": \"$.devices[*].vendor\",\n        \"operator\": \"not_equal\",\n        \"value\": \"Cisco Systems\"\n      },\n      {\n        \"all\": [\n          {\n            \"path\": \"$.devices[*].vendor\",\n            \"operator\": \"equal\",\n            \"value\": \"Cisco Systems\"\n          },\n          {\n            \"path\": \"$.devices[*].osVersion\",\n            \"operator\": \"equal\",\n            \"value\": \"17.3.6\"\n          }\n        ]\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/rules/validate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"rules",
								"validate"
							]
						},
						"description": "Validate a rule definition"
					},
					"response": []
				},
				{
					"name": "Store Rules",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"entity_type\": \"NDC_Request\",\n  \"default_category\": \"general\",\n  \"rules\": [\n    {\n      \"name\": \"SHOULD RUN OPENNMS TASK2\",\n      \"description\": \"Checks if an OpenNMS task should be run based on FQDN existence and function code restrictions\",\n      \"categories\": [\"taskValidation\", \"networkMonitoring\"],\n      \"conditions\": {\n        \"all\": [\n          {\n            \"path\": \"$.requests[*].fqdn\",\n            \"operator\": \"exists\",\n            \"value\": true\n          },\n          {\n            \"not\": {\n              \"path\": \"$.requests[*].functionCode\",\n              \"operator\": \"in_list\",\n              \"value\": [\"LAN\", \"SEC\", \"WLN\", \"WLF\"]\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"VALIDATE IP ADDRESS FORMAT\",\n      \"description\": \"Ensures management IP addresses follow proper IPv4 format\",\n      \"categories\": [\"taskValidation\", \"securityValidation\", \"dataQuality\"],\n      \"conditions\": {\n        \"all\": [\n          {\n            \"path\": \"$.requests[*].managementIP\",\n            \"operator\": \"exists\",\n            \"value\": true\n          },\n          {\n            \"path\": \"$.requests[*].managementIP\",\n            \"operator\": \"match\",\n            \"value\": \"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"VERIFY TECHNICIAN ASSIGNMENT\",\n      \"description\": \"Checks that all requests have both a technician and a technician group assigned\",\n      \"categories\": [\"taskValidation\", \"workflowValidation\"],\n      \"conditions\": {\n        \"all\": [\n          {\n            \"path\": \"$.requests[*].l1Technician\",\n            \"operator\": \"exists\",\n            \"value\": true\n          },\n          {\n            \"path\": \"$.requests[*].l1TechnicianGroup\",\n            \"operator\": \"exists\",\n            \"value\": true\n          }\n        ]\n      }\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/rules",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"rules"
							]
						},
						"description": "Store rules in the engine"
					},
					"response": []
				},
				{
					"name": "List Rules",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/rules",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"rules"
							]
						},
						"description": "List all rules in the engine"
					},
					"response": []
				}
			],
			"description": "Rule management endpoints"
		},
		{
			"name": "Evaluation",
			"item": [
				{
					"name": "Evaluate Data",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"entity_type\": \"device\",\n  \"categories\": [\"version\"],\n  \"data\": {\n    \"devices\": [\n      {\n        \"vendor\": \"Cisco Systems\",\n        \"osVersion\": \"17.3.6\",\n        \"mgmtIP\": \"192.168.1.1\"\n      },\n      {\n        \"vendor\": \"Microsoft\",\n        \"osVersion\": \"10.0.19045\",\n        \"mgmtIP\": \"10.0.0.1\"\n      },\n      {\n        \"vendor\": \"Cisco Systems\",\n        \"osVersion\": \"16.9.5\",\n        \"mgmtIP\": \"192.168.1.3\"\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"evaluate"
							]
						},
						"description": "Evaluate data against stored rules"
					},
					"response": []
				},
				{
					"name": "Evaluate With Rules",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"entity_type\": \"device\",\n  \"rules\": [\n    {\n      \"name\": \"All Devices Must Have Management IP2\",\n      \"conditions\": {\n        \"all\": [\n          {\n            \"path\": \"$.devices[*].mgmtIP\",\n            \"operator\": \"equal\",\n            \"value\": \"192.168.1.16\"\n          }\n        ]\n      }\n    }\n  ],\n  \"data\": {\n    \"devices\": [\n      {\n        \"vendor\": \"Cisco Systems\",\n        \"osVersion\": \"17.3.6\",\n        \"mgmtIP\": \"192.168.1.16\"\n      },\n      {\n        \"vendor\": \"Microsoft\",\n        \"osVersion\": \"10.0.19045\",\n            \"mgmtIP\": \"192.168.1.1\"\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/evaluate/with-rules",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"evaluate",
								"with-rules"
							]
						},
						"description": "Evaluate data against provided rules"
					},
					"response": []
				}
			],
			"description": "Data evaluation endpoints"
		},
		{
			"name": "Complex Examples",
			"item": [
				{
					"name": "Validate Complex Nested Rule",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Complex Configuration Rule\",\n  \"description\": \"A complex rule with deeply nested conditions\",\n  \"conditions\": {\n    \"all\": [\n      {\n        \"any\": [\n          {\n            \"path\": \"$.configs[*].type\",\n            \"operator\": \"equal\",\n            \"value\": \"firewall\"\n          },\n          {\n            \"all\": [\n              {\n                \"path\": \"$.configs[*].type\",\n                \"operator\": \"equal\",\n                \"value\": \"router\"\n              },\n              {\n                \"path\": \"$.configs[*].security_level\",\n                \"operator\": \"greater_than_equal\",\n                \"value\": 3\n              }\n            ]\n          }\n        ]\n      },\n      {\n        \"none\": [\n          {\n            \"path\": \"$.configs[*].status\",\n            \"operator\": \"equal\",\n            \"value\": \"deprecated\"\n          },\n          {\n            \"not\": {\n              \"path\": \"$.configs[*].compliance_checked\",\n              \"operator\": \"equal\",\n              \"value\": true\n            }\n          }\n        ]\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/rules/validate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"rules",
								"validate"
							]
						},
						"description": "Validate a complex rule with deep nesting"
					},
					"response": []
				},
				{
					"name": "Store Multiple Rules",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"entity_type\": \"network\",\n  \"category\": \"security\",\n  \"rules\": [\n    {\n      \"name\": \"Firewall Rule\",\n      \"description\": \"Check if firewall is enabled\",\n      \"conditions\": {\n        \"all\": [\n          {\n            \"path\": \"$.networks[*].firewall_enabled\",\n            \"operator\": \"equal\",\n            \"value\": true\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"Encryption Rule\",\n      \"description\": \"Check if encryption is enabled\",\n      \"conditions\": {\n        \"all\": [\n          {\n            \"path\": \"$.networks[*].encryption\",\n            \"operator\": \"equal\",\n            \"value\": \"AES-256\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"VPN Rule\",\n      \"description\": \"Check if VPN is set up\",\n      \"conditions\": {\n        \"all\": [\n          {\n            \"path\": \"$.networks[*].vpn_configured\",\n            \"operator\": \"equal\",\n            \"value\": true\n          }\n        ]\n      }\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/rules",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"rules"
							]
						},
						"description": "Store multiple rules at once"
					},
					"response": []
				},
				{
					"name": "Role Device Operator Example",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"entity_type\": \"device\",\n  \"rules\": [\n    {\n      \"name\": \"Secondary Device Check\",\n      \"description\": \"Checks if the device is a secondary device\",\n      \"conditions\": {\n        \"all\": [\n          {\n            \"path\": \"$.devices[*].hostname\",\n            \"operator\": \"role_device\",\n            \"value\": \"secondary\"\n          }\n        ]\n      }\n    }\n  ],\n  \"data\": {\n    \"devices\": [\n      {\n        \"id\": \"device-1\",\n        \"hostname\": \"HUJ-AA-201\",\n        \"status\": \"active\"\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/evaluate/with-rules",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"evaluate",
								"with-rules"
							]
						},
						"description": "Example using the custom role_device operator"
					},
					"response": []
				}
			],
			"description": "Complex examples showcasing advanced rule engine capabilities"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8000",
			"type": "string"
		}
	]
}